;; ---------------- windows ---------------- ;;



(deflisten nvidia "nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader,nounits --loop=1")
(defpoll amd :interval "1s" :initial-value "0" "cat /sys/class/drm/card1/device/gpu_busy_percent")
(defpoll br :interval "10s" :initial-value "255" "brightnessctl g -m")



;; ---------------- windows ---------------- ;;



(defwindow menu
	:monitor 0
	:geometry (geometry	:x "10px"	:y "10px"	:width "10%"	:height "30%"	:anchor "top right")
	:stacking "fg"
	:exclusive false
	(menu-content)
)



;; ---------------- contents ---------------- ;;



(defwidget menu-content []
	(box
		:class "menu-content"
		:orientation "v"
		:space-evenly false
		(menu-content-upbar)
		(menu-content-info)
		(menu-content-control-panel)
	)
)

(defwidget menu-content-upbar []
	(box
		:class "menu-content"
		:orientation "h"
		:space-evenly true
		(menu-user)
		(menu-power)
	)
)

(defwidget menu-content-info []
	(box
		:class "menu-content"
		:orientation "v"
		:space-evenly true
		(menu-info-container)
		(menu-sys-container)
	)
)

(defwidget menu-content-control-panel []
	(box
		:class "menu-content"
		:orientation "h"
		:space-evenly true
		(menu-control-sliders)
	)
)



;; ---------------- upbar ---------------- ;;



(defwidget menu-user []
	(box
		:class "menu-user-box"
		:orientation "h"
		:space-evenly false
		;; (image)
		(label	:class "menu-user-label"	:text "yosyo")
	)
)

(defwidget menu-power []
	(box
		:class "menu-power"
		:orientation "h"
		:space-evenly false
		(button
			:class "menu-power-button sleep"
			:onclick "echo 'hyprctl dispatch exit'"
			"s"
		)
		(label	:class "menu-power-separator"	:text "|")
		(button
			:class "menu-power-button reboot"
			:onclick "echo reboot"
			"r"
		)
		(label	:class "menu-power-separator"	:text "|")
		(button
			:class "menu-power-button shutdown"
			:onclick "echo 'you should shutdown yourself, NOW'"
			"s"
		)
	)
)



;; ---------------- info ---------------- ;;




(defwidget menu-info-container []
	(box
		:class "menu-info-container"
		:orientation "h"
		:space-evenly true
		(box
			:class "menu-net-info"
			:orientation "v"
			:space-evenly true
			(menu-wifi)
			(menu-bluetooth) 
			(menu-dnd)
		)
		(box
			:orientation "v"
			:space-evenly true
			(menu-power-saving)
			(menu-night)
		)
	)
)

(defwidget menu-wifi []
	(box
		:class "menu-wifi"
		:orientation "h"
		:space-evenly false
		;; (logo)
		(box
			:class "menu-wifi-labels"
			:orientation "v"
			:space-evenly true
			(label	:class "menu-wifi-title"	:text "WiFi")
			(label	:class "menu-wifi-status"	:text "On")
		)
	)
)

(defwidget menu-bluetooth []
	(box
		:class "menu-bluetooth"
		:orientation "h"
		:space-evenly false
		;; (logo)
		(box
			:class "menu-bluetooth-labels"
			:orientation "v"
			:space-evenly true
			(label	:class "menu-bluetooth-title"	:text "Bluetooth")
			(label	:class "menu-bluetooth-status"	:text "Off")
		)
	)
)

(defwidget menu-dnd []
	(box
		:class "menu-dnd"
		:orientation "h"
		:space-evenly false
		;; (logo)
		(box
			:class "menu-dnd-labels"
			:orientation "v"
			:space-evenly true
			(label	:class "menu-dnd-title"	:text "Do Not Disturb")
			(label	:class "menu-dnd-status"	:text "Off")
		)
	)
)

(defwidget menu-power-saving []
	(box
		:class "menu-power-saving"
		:orientation "h"
		:space-evenly false
		;; (logo)
		(box
			:class "menu-power-saving-labels"
			:orientation "v"
			:space-evenly true
			(label	:class "menu-power-saving-title"	:text "Power Saving")
			(label	:class "menu-power-saving-status"	:text "Off")
		)
	)
)

(defwidget menu-night []
	(box
		:class "menu-night"
		:orientation "h"
		:space-evenly false
		;; (logo)
		(box
			:class "menu-night-labels"
			:orientation "v"
			:space-evenly true
			(label	:class "menu-night-title"	:text "Night Mode")
			(label	:class "menu-night-status"	:text "On")
		)
	)
)

;; -- sys info --

(defwidget menu-sys-container []
	(box
		:class "menu-info-container"
		:orientation "v"
		:space-evenly true
		(box
			:orientation "h"
			:space-evenly true
			(menu-cpu)
			(menu-ram)
		)
		(box
			:orientation "h"
			:space-evenly true
			(menu-gpu-nvidia)
			(menu-gpu-amd)
		)
		(menu-disk)
	)
)

(defwidget menu-cpu []
	(box
		:class "menu-cpu"
		:orientation "h"
		:space-evenly false
		(circular-progress
			:class "menu-cpu-progress"
			:thickness "10"
			:start-at "0"
			:clockwise true
			:value {EWW_CPU.avg}
		)
		(box
			:class "menu-cpu-labels"
			:orientation "v"
			:space-evenly true
			(label	:class "menu-cpu-title"	:text "cpu")
			(label	:class "menu-cpu-status"	:text "${round(EWW_CPU.avg, 0)} %")
		)
	)
)

(defwidget menu-ram []
	(box
		:class "menu-ram"
		:orientation "h"
		:space-evenly false
		(circular-progress
			:class "menu-ram-progress"
			:thickness "10"
			:start-at "0"
			:clockwise true
			:value {EWW_RAM.used_mem_perc}
		)
		(box
			:class "menu-cpu-labels"
			:orientation "v"
			:space-evenly true
			(label	:class "menu-ram-title"	:text "ram")
			(label	:class "menu-ram-status"	:text "${round(EWW_RAM.used_mem_perc, 0)} %")
		)
	)
)

(defwidget menu-gpu-nvidia []
	(box
		:class "menu-gpu-nvidia"
		:orientation "h"
		:space-evenly false
		(circular-progress
			:class "menu-gpu-nvidia-progress"
			:thickness "10"
			:start-at "0"
			:clockwise true
			:value {nvidia}
		)
		(box
			:class "menu-gpu-nvidia-labels"
			:orientation "v"
			:space-evenly true
			(label	:class "menu-gpu-nvidia-title"	:text "Nvidia gpu")
			(label	:class "menu-gpu-nvidia-status"	:text "${nvidia} %")
		)
	)
)

(defwidget menu-gpu-amd []
	(box
		:class "menu-gpu-amd"
		:orientation "h"
		:space-evenly false
		(circular-progress
			:class "menu-gpu-amd-progress"
			:thickness "10"
			:start-at "0"
			:clockwise true
			:value {amd}
		)
		(box
			:class "menu-gpu-amd-labels"
			:orientation "v"
			:space-evenly true
			(label	:class "menu-gpu-amd-title"	:text "AMD gpu")
			(label	:class "menu-gpu-amd-status"	:text "${amd} %")
		)
	)
)

(defwidget menu-disk []
	(box
		:class "menu-disk"
		:orientation "v"
		:space-evenly false
		(box
			:class "menu-disk-labels"
			:orientation "h"
			:space-evenly true
			(label	:class "menu-disk-title"	:text "disk")
			(label	:class "menu-disk-separator"	:text "|")
			(label	:class "menu-disk-status"	:text "${round(EWW_DISK["/"].used_perc, 1)} %")
		)
		(progress
			:class "menu-disk-progress"
			:value {EWW_DISK["/"].used_perc}
		)

	)
)


;; ---------------- control panel ---------------- ;;



(defwidget menu-control-sliders []
	(box
		:class "menu-control-sliders"
		:orientation "v"
		:space-evenly true
		(menu-slider-volume)
		(menu-slider-brightness)
	)
)

(defwidget menu-slider-volume []
	(box
		:class "menu-slider-volume"
		:orientation "v"
		:space-evenly true
		(label	:class "menu-slider-volume-label"	:text "volume")
		(box
			:orientation "h"
			:space-evenly false
			(label	:class "menu-slider-volume-logo"	:text "o")
			(scale
				:class "menu-slider-volume-scale"
				:min "0"
				:max "100"
				:onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%"
				:orientation "h"
			)
		)
	)
)

(defwidget menu-slider-brightness []
	(box
		:class "menu-slider-brightness"
		:orientation "v"
		:space-evenly true
		(label	:class "menu-slider-brightness-label"	:text "brightness")
		(box
			:class "menu-slider-brightness-box"
			:orientation "h"
			:space-evenly false
			(label	:class "menu-slider-brightness-logo"	:text "x")
			(scale
				:class "menu-slider-brightness-scale"
				:value "${br}"
				:min "0"
				:max "255"
				:onchange "brightnessctl set {}"
				:orientation "h"
			)
		)
	)
)
